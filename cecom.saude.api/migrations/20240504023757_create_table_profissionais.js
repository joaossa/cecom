// Migration for table: profissionais
exports.up = function(knex) {
  return knex.schema.createTable('profissionais', table => {
    table.increments('codigoprof'); // Handles the int4 GENERATED BY DEFAULT AS IDENTITY
    table.string('nome', 50).notNullable();
    table.string('sexo', 1).notNullable().check('sexo IN (\'M\', \'F\', \'I\')'); // M for Male, F for Female, I for Intersex/Other
    table.date('dtnascimento').notNullable();
    table.string('cpf', 11).notNullable().unique();
    table.string('rg', 15).nullable();
    table.string('orgaoemissor', 10).nullable();
    table.integer('codigocargo').nullable().references('codigo').inTable('cargos'); // Optional foreign key to cargos
    table.string('cd_situacao', 1).nullable(); // Could have a check constraint if specific codes are known
    table.timestamp('dt_admissao').nullable();
    table.timestamp('dt_demissao').nullable();
    table.string('apelido', 20).nullable();
    table.string('entidadeclasse', 100).nullable();
    table.string('conselhoprofissional', 7).nullable();
    table.string('email', 200).notNullable().unique();
    table.string('nmCivil', 50).nullable();
    table.string('stNmSocial', 1).defaultTo('N').nullable().check('stNmSocial IN (\'S\', \'N\')'); // S for Social Name, N for not used
    table.primary(['codigoprof']); // Sets the primary key
  });
};

exports.down = function(knex) {
  return knex.schema.dropTable('profissionais');
};